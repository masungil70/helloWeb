name: 무중단 was 운영 방법(Blue-Green 배포 전략)
on: 
  push:
    branches: [ main ]

#환경설정변수
env:
  REPOSITORY_NAME: hello-web:blue
  USER: /home/kosa
      
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: gradlew 실행권한 설정 
        run: chmod +x gradlew
        
      - name: test gradlew 
        run: ./gradlew --info test
        
      - name: build gradlew 
        run: ./gradlew bootJar
       
      - name: docker image build 
        run: |
          docker build -t ${{ secrets.USERNAME }}/${{env.REPOSITORY_NAME}} . 
        
      - name: docker hub login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
        
      - name: docker hub push 
        run: docker push ${{ secrets.USERNAME }}/${{env.REPOSITORY_NAME}}
        
  deploy:
    needs: build
    name: 서버에 배포 단계
    runs-on: [ self-hosted, kosa-host ]
    steps:
    - name: 운영서버에서 docker hub에 로그인 
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
    
    - name: docker-compose에서 이미지 다운로드 및 실행 
      run: |
        cd ${{env.USER}}/helloWeb/docker  #작업 경로 변경
        
        ls -al docker-compose.yml  # 👈 디버깅용, 파일이 있는지 확인
         
        #blue-green 전략에 맞게 작업을 진행한다
        echo "[1] 새 이미지를 docker hub로 부터 pull 내려 받는다"
        docker pull masungil/hello-web:blue

        echo "[2] Blue 컨테이너 시작"
        docker compose  up -d was1-blue was2-blue

        echo "[3] Blue 컨테이너 Health Check 수행..."
        sleep 3
        curl --fail http://localhost:8080 || {
                echo "Blue 컨테이너 Health check 실패. 롤백합니다."
                exit 1
        }

        echo "[4] Blue  green으로 변경"
        cp nginx-blue.conf nginx.conf
        docker exec webserver nginx -s reload

        echo "[5] blue 이미지를 green으로 이미지로 tag"
        docker tag masungil/hello-web:blue  masungil/hello-web:green

        echo "[6] green를 docker hub에 push 한다"
        docker push masungil/hello-web:green

        echo "[7] 현재 실행중이 docker comspose green를 새로운 green 이미지로 반영한다"
        docker compose up -d was1-green was2-green

        echo "[8] 현재 실행중이 blue 실행 환경을 green 환경 변경한다"
        cp nginx-green.conf nginx.conf
        docker exec webserver nginx -s reload

        echo "[9] 불필요한 이미지/컨테이너 정리..."
        docker image prune -f

        echo "[10] 배포 완료"
